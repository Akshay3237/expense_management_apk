import 'package:expense_tracker/comonFunctions.dart';
import 'package:expense_tracker/models/category_model.dart';
import 'package:expense_tracker/services/category_service.dart';
import 'package:flutter/material.dart';

class AddCategory extends StatefulWidget {
  final VoidCallback onClose; // Callback for closing the form
  final VoidCallback onSuccess; // Callback for successful submission

  AddCategory({required this.onClose, required this.onSuccess});

  @override
  _AddCategoryState createState() => _AddCategoryState();
}

class _AddCategoryState extends State<AddCategory> {
  final _categoryController = TextEditingController();
  String _error = '';
  bool _isLoading = false; // State variable for loading indicator

  // Handle category input change if needed
  void _handleCategoryInputChange(String value) {
    setState(() {
      _error = ''; // Clear error when input changes
    });
  }

  // Handle category submission
  void _handleCategorySubmit() async {
    final newCategory = _categoryController.text.trim();

    if (newCategory.isEmpty) {
      setState(() {
        _error = 'Category name cannot be empty';
      });
      return;
    }

    setState(() {
      _isLoading = true; // Show loading indicator
    });

    try {
      final userId = await getUserId();
      if (userId != null) {
        final category = Category(
          id: '', // Assuming id will be generated by the server
          name: newCategory,
          userId: userId,
        );

        final categoryService = CategoryService();
        await categoryService.createCategory(category);

        widget.onSuccess(); // Call the success callback

      } else {
        setState(() {
          _error = 'Failed to get user ID from token.';
        });
      }
    } catch (e) {
      setState(() {
        _error = 'Failed to create category: ${e.toString()}';
      });
    } finally {
      setState(() {
        _isLoading = false; // Hide loading indicator
      });
    }
  }

  // Handle form cancellation
  void _handleCategoryCancel() {
    widget.onClose(); // Simply close the form without submitting
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Container(
            color: Colors.black54, // Overlay color
            child: Center(
              child: Container(
                padding: EdgeInsets.all(16.0),
                width: 300,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                  boxShadow: [BoxShadow(color: Colors.black26, blurRadius: 10)],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: _categoryController,
                      decoration: InputDecoration(
                        hintText: 'Enter new category',
                      ),
                      onChanged: _handleCategoryInputChange,
                    ),
                    SizedBox(height: 16),
                    if (_isLoading)
                      CircularProgressIndicator(), // Show loading indicator
                    if (!_isLoading) ...[
                      ElevatedButton(
                        onPressed: _handleCategorySubmit,
                        child: Text('Submit'),
                      ),
                      SizedBox(height: 8),
                      OutlinedButton(
                        onPressed: _handleCategoryCancel,
                        child: Text('Cancel'),
                      ),
                    ],
                    if (_error.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(top: 16.0),
                        child: Text(
                          _error,
                          style: TextStyle(color: Colors.red),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
